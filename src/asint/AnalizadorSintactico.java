
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Mar 23 00:39:27 CET 2019
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Mar 23 00:39:27 CET 2019
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\006\031\004\032\010\001\002\000\004\004" +
    "\uffe7\001\002\000\006\013\015\027\014\001\002\000\004" +
    "\004\013\001\002\000\004\002\012\001\002\000\004\004" +
    "\uffe6\001\002\000\006\013\ufffe\027\ufffe\001\002\000\004" +
    "\002\000\001\002\000\006\013\ufffd\027\ufffd\001\002\000" +
    "\004\004\021\001\002\000\006\031\004\032\010\001\002" +
    "\000\006\013\uffff\027\uffff\001\002\000\006\002\001\013" +
    "\071\001\002\000\006\002\ufffb\013\ufffb\001\002\000\004" +
    "\011\022\001\002\000\022\004\026\005\024\006\032\007" +
    "\025\023\036\024\023\033\027\034\030\001\002\000\022" +
    "\004\026\005\024\006\032\007\025\023\036\024\023\033" +
    "\027\034\030\001\002\000\040\002\uffed\010\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\024\uffed\025\uffed\026\uffed\030\uffed\001\002" +
    "\000\022\004\026\005\024\006\032\007\025\023\036\024" +
    "\023\033\027\034\030\001\002\000\040\002\uffeb\010\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\001\002\000\040\002\uffea\010\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\024\uffea\025\uffea\026\uffea\030\uffea\001\002\000\040\002" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\001\002\000\040\002\uffee\010\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\024\uffee\025\uffee\026\uffee\030\uffee\001\002" +
    "\000\040\002\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\030\uffec\001\002\000\040\002\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\030" +
    "\ufff1\001\002\000\040\002\ufff3\010\ufff3\012\060\013\ufff3" +
    "\014\061\015\054\016\057\017\055\020\ufff3\021\ufff3\022" +
    "\ufff3\024\ufff3\025\056\026\062\030\063\001\002\000\020" +
    "\002\ufff5\010\ufff5\013\ufff5\020\ufff5\021\046\022\047\024" +
    "\ufff5\001\002\000\022\004\026\005\024\006\032\007\025" +
    "\023\036\024\023\033\027\034\030\001\002\000\014\002" +
    "\ufff8\010\ufff8\013\ufff8\020\ufff8\024\ufff8\001\002\000\012" +
    "\002\ufffa\013\ufffa\020\041\024\043\001\002\000\022\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\023\uffe5\024\uffe5\033\uffe5" +
    "\034\uffe5\001\002\000\022\004\026\005\024\006\032\007" +
    "\025\023\036\024\023\033\027\034\030\001\002\000\022" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\023\uffe4\024\uffe4\033" +
    "\uffe4\034\uffe4\001\002\000\014\002\ufff9\010\ufff9\013\ufff9" +
    "\020\ufff9\024\ufff9\001\002\000\040\002\uffef\010\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\030\uffef\001" +
    "\002\000\022\004\026\005\024\006\032\007\025\023\036" +
    "\024\023\033\027\034\030\001\002\000\022\004\026\005" +
    "\024\006\032\007\025\023\036\024\023\033\027\034\030" +
    "\001\002\000\014\002\ufff6\010\ufff6\013\ufff6\020\ufff6\024" +
    "\ufff6\001\002\000\014\002\ufff7\010\ufff7\013\ufff7\020\ufff7" +
    "\024\ufff7\001\002\000\022\004\026\005\024\006\032\007" +
    "\025\023\036\024\023\033\027\034\030\001\002\000\022" +
    "\004\026\005\024\006\032\007\025\023\036\024\023\033" +
    "\027\034\030\001\002\000\022\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\023\uffe2\024\uffe2\033\uffe2\034\uffe2\001\002\000" +
    "\022\004\uffe0\005\uffe0\006\uffe0\007\uffe0\023\uffe0\024\uffe0" +
    "\033\uffe0\034\uffe0\001\002\000\022\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\023\uffdd\024\uffdd\033\uffdd\034\uffdd\001\002" +
    "\000\022\004\uffe1\005\uffe1\006\uffe1\007\uffe1\023\uffe1\024" +
    "\uffe1\033\uffe1\034\uffe1\001\002\000\022\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\023\uffdf\024\uffdf\033\uffdf\034\uffdf\001" +
    "\002\000\022\004\uffe3\005\uffe3\006\uffe3\007\uffe3\023\uffe3" +
    "\024\uffe3\033\uffe3\034\uffe3\001\002\000\022\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\023\uffdc\024\uffdc\033\uffdc\034\uffdc" +
    "\001\002\000\022\004\uffde\005\uffde\006\uffde\007\uffde\023" +
    "\uffde\024\uffde\033\uffde\034\uffde\001\002\000\024\002\ufff4" +
    "\010\ufff4\013\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\025" +
    "\056\026\062\001\002\000\040\002\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\001\002" +
    "\000\010\010\067\020\041\024\043\001\002\000\040\002" +
    "\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\030\uffe8\001\002\000\040\002\ufff0\010\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\001\002" +
    "\000\004\004\021\001\002\000\006\002\ufffc\013\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\012\002\006\003\004\004\010\015\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\016\006\017" +
    "\001\001\000\006\004\015\015\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\037\010\036\011\034\012\033\013\032\014" +
    "\030\001\001\000\006\013\067\014\030\001\001\000\002" +
    "\001\001\000\016\007\065\010\036\011\034\012\033\013" +
    "\032\014\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\052\020\051\001\001\000\002" +
    "\001\001\000\006\013\044\014\030\001\001\000\002\001" +
    "\001\000\004\016\041\001\001\000\002\001\001\000\014" +
    "\010\043\011\034\012\033\013\032\014\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\050\011\034\012\033\013\032\014\030\001\001\000" +
    "\012\011\047\012\033\013\032\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\064\014\030\001" +
    "\001\000\010\012\063\013\032\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\051\001\001\000\002\001" +
    "\001\000\004\016\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\071\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= LDs SEPARADOR LD2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LDs ::= LDs PUNTOCOMA D 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDs ::= D 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LDs",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= T IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LD2 ::= LD2 PUNTOCOMA D2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LD2",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LD2 ::= D2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LD2",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // D2 ::= IDEN IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("D2",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E0 ::= E0 OP0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E1 ::= E2 AND E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E1 ::= E2 OR E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E2 ::= E3 OP2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E3 ::= E3 OP3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E4 ::= MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E5 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E5 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E5 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E5 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E5 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E5 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP0 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP0",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP0 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP0",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= MAYIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= MENIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP2 ::= EQUIVALENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP2 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP2",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP3",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP3",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

